// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: common/v1/common.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Common_V1_MessageType: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unspecified // = 0
  case text // = 1
  case image // = 2
  case video // = 3
  case gif // = 4
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .text
    case 2: self = .image
    case 3: self = .video
    case 4: self = .gif
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .text: return 1
    case .image: return 2
    case .video: return 3
    case .gif: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Common_V1_MessageType] = [
    .unspecified,
    .text,
    .image,
    .video,
    .gif,
  ]

}

public enum Common_V1_OperationType: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unspecified // = 0
  case getAccount // = 1
  case generateAccountLinkPath // = 2
  case resolveAccountLinkPath // = 3
  case sendMessage // = 4
  case fetchOperations // = 31
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .getAccount
    case 2: self = .generateAccountLinkPath
    case 3: self = .resolveAccountLinkPath
    case 4: self = .sendMessage
    case 31: self = .fetchOperations
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .getAccount: return 1
    case .generateAccountLinkPath: return 2
    case .resolveAccountLinkPath: return 3
    case .sendMessage: return 4
    case .fetchOperations: return 31
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Common_V1_OperationType] = [
    .unspecified,
    .getAccount,
    .generateAccountLinkPath,
    .resolveAccountLinkPath,
    .sendMessage,
    .fetchOperations,
  ]

}

public struct Common_V1_Account: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var displayName: String = String()

  public var statusEmoji: String = String()

  public var statusMessage: String = String()

  public var iconPath: String = String()

  public var bannerPath: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Common_V1_Message: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var origin: String = String()

  public var destination: String = String()

  public var messageType: Common_V1_MessageType = .unspecified

  public var text: String = String()

  public var createdAt: String = String()

  public var updatedAt: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Common_V1_Operation: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var snapshot: UInt32 = 0

  public var operationType: Common_V1_OperationType = .unspecified

  public var param1: String = String()

  public var param2: String = String()

  public var param3: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "common.v1"

extension Common_V1_MessageType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "MESSAGE_TYPE_UNSPECIFIED"),
    1: .same(proto: "MESSAGE_TYPE_TEXT"),
    2: .same(proto: "MESSAGE_TYPE_IMAGE"),
    3: .same(proto: "MESSAGE_TYPE_VIDEO"),
    4: .same(proto: "MESSAGE_TYPE_GIF"),
  ]
}

extension Common_V1_OperationType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OPERATION_TYPE_UNSPECIFIED"),
    1: .same(proto: "OPERATION_TYPE_GET_ACCOUNT"),
    2: .same(proto: "OPERATION_TYPE_GENERATE_ACCOUNT_LINK_PATH"),
    3: .same(proto: "OPERATION_TYPE_RESOLVE_ACCOUNT_LINK_PATH"),
    4: .same(proto: "OPERATION_TYPE_SEND_MESSAGE"),
    31: .same(proto: "OPERATION_TYPE_FETCH_OPERATIONS"),
  ]
}

extension Common_V1_Account: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Account"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "display_name"),
    3: .standard(proto: "status_emoji"),
    4: .standard(proto: "status_message"),
    5: .standard(proto: "icon_path"),
    6: .standard(proto: "banner_path"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.displayName) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.statusEmoji) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.statusMessage) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.iconPath) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.bannerPath) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.displayName.isEmpty {
      try visitor.visitSingularStringField(value: self.displayName, fieldNumber: 2)
    }
    if !self.statusEmoji.isEmpty {
      try visitor.visitSingularStringField(value: self.statusEmoji, fieldNumber: 3)
    }
    if !self.statusMessage.isEmpty {
      try visitor.visitSingularStringField(value: self.statusMessage, fieldNumber: 4)
    }
    if !self.iconPath.isEmpty {
      try visitor.visitSingularStringField(value: self.iconPath, fieldNumber: 5)
    }
    if !self.bannerPath.isEmpty {
      try visitor.visitSingularStringField(value: self.bannerPath, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Common_V1_Account, rhs: Common_V1_Account) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.displayName != rhs.displayName {return false}
    if lhs.statusEmoji != rhs.statusEmoji {return false}
    if lhs.statusMessage != rhs.statusMessage {return false}
    if lhs.iconPath != rhs.iconPath {return false}
    if lhs.bannerPath != rhs.bannerPath {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Common_V1_Message: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Message"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "origin"),
    3: .same(proto: "destination"),
    4: .standard(proto: "message_type"),
    5: .same(proto: "text"),
    6: .standard(proto: "created_at"),
    7: .standard(proto: "updated_at"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.origin) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.destination) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.messageType) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.text) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.createdAt) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.updatedAt) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.origin.isEmpty {
      try visitor.visitSingularStringField(value: self.origin, fieldNumber: 2)
    }
    if !self.destination.isEmpty {
      try visitor.visitSingularStringField(value: self.destination, fieldNumber: 3)
    }
    if self.messageType != .unspecified {
      try visitor.visitSingularEnumField(value: self.messageType, fieldNumber: 4)
    }
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 5)
    }
    if !self.createdAt.isEmpty {
      try visitor.visitSingularStringField(value: self.createdAt, fieldNumber: 6)
    }
    if !self.updatedAt.isEmpty {
      try visitor.visitSingularStringField(value: self.updatedAt, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Common_V1_Message, rhs: Common_V1_Message) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.origin != rhs.origin {return false}
    if lhs.destination != rhs.destination {return false}
    if lhs.messageType != rhs.messageType {return false}
    if lhs.text != rhs.text {return false}
    if lhs.createdAt != rhs.createdAt {return false}
    if lhs.updatedAt != rhs.updatedAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Common_V1_Operation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Operation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "snapshot"),
    2: .standard(proto: "operation_type"),
    3: .same(proto: "param1"),
    4: .same(proto: "param2"),
    5: .same(proto: "param3"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.snapshot) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.operationType) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.param1) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.param2) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.param3) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.snapshot != 0 {
      try visitor.visitSingularUInt32Field(value: self.snapshot, fieldNumber: 1)
    }
    if self.operationType != .unspecified {
      try visitor.visitSingularEnumField(value: self.operationType, fieldNumber: 2)
    }
    if !self.param1.isEmpty {
      try visitor.visitSingularStringField(value: self.param1, fieldNumber: 3)
    }
    if !self.param2.isEmpty {
      try visitor.visitSingularStringField(value: self.param2, fieldNumber: 4)
    }
    if !self.param3.isEmpty {
      try visitor.visitSingularStringField(value: self.param3, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Common_V1_Operation, rhs: Common_V1_Operation) -> Bool {
    if lhs.snapshot != rhs.snapshot {return false}
    if lhs.operationType != rhs.operationType {return false}
    if lhs.param1 != rhs.param1 {return false}
    if lhs.param2 != rhs.param2 {return false}
    if lhs.param3 != rhs.param3 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
