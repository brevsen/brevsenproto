// Code generated by protoc-gen-connect-swift. DO NOT EDIT.
//
// Source: distribution/v1/distribution.proto
//

import Connect
import Foundation
import SwiftProtobuf

public protocol Distribution_V1_DistributionServiceClientInterface: Sendable {

    func `fetchOperations`(headers: Connect.Headers, onResult: @escaping @Sendable (Connect.StreamResult<Distribution_V1_FetchOperationsResponse>) -> Void) -> any Connect.ServerOnlyStreamInterface<Distribution_V1_FetchOperationsRequest>

    @available(iOS 13, *)
    func `fetchOperations`(headers: Connect.Headers) -> any Connect.ServerOnlyAsyncStreamInterface<Distribution_V1_FetchOperationsRequest, Distribution_V1_FetchOperationsResponse>
}

/// Concrete implementation of `Distribution_V1_DistributionServiceClientInterface`.
public final class Distribution_V1_DistributionServiceClient: Distribution_V1_DistributionServiceClientInterface, Sendable {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    public func `fetchOperations`(headers: Connect.Headers = [:], onResult: @escaping @Sendable (Connect.StreamResult<Distribution_V1_FetchOperationsResponse>) -> Void) -> any Connect.ServerOnlyStreamInterface<Distribution_V1_FetchOperationsRequest> {
        return self.client.serverOnlyStream(path: "/distribution.v1.DistributionService/FetchOperations", headers: headers, onResult: onResult)
    }

    @available(iOS 13, *)
    public func `fetchOperations`(headers: Connect.Headers = [:]) -> any Connect.ServerOnlyAsyncStreamInterface<Distribution_V1_FetchOperationsRequest, Distribution_V1_FetchOperationsResponse> {
        return self.client.serverOnlyStream(path: "/distribution.v1.DistributionService/FetchOperations", headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let fetchOperations = Connect.MethodSpec(name: "FetchOperations", service: "distribution.v1.DistributionService", type: .serverStream)
        }
    }
}
