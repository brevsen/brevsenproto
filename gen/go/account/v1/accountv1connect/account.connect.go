// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: account/v1/account.proto

package accountv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/brevsen/brevsenproto/gen/go/account/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AccountServiceName is the fully-qualified name of the AccountService service.
	AccountServiceName = "account.v1.AccountService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AccountServiceGetAccountProcedure is the fully-qualified name of the AccountService's GetAccount
	// RPC.
	AccountServiceGetAccountProcedure = "/account.v1.AccountService/GetAccount"
	// AccountServiceGetAccountWithIdProcedure is the fully-qualified name of the AccountService's
	// GetAccountWithId RPC.
	AccountServiceGetAccountWithIdProcedure = "/account.v1.AccountService/GetAccountWithId"
	// AccountServiceGenerateAccountLinkPathProcedure is the fully-qualified name of the
	// AccountService's GenerateAccountLinkPath RPC.
	AccountServiceGenerateAccountLinkPathProcedure = "/account.v1.AccountService/GenerateAccountLinkPath"
	// AccountServiceResolveAccountLinkPathProcedure is the fully-qualified name of the AccountService's
	// ResolveAccountLinkPath RPC.
	AccountServiceResolveAccountLinkPathProcedure = "/account.v1.AccountService/ResolveAccountLinkPath"
	// AccountServiceDeleteAccountProcedure is the fully-qualified name of the AccountService's
	// DeleteAccount RPC.
	AccountServiceDeleteAccountProcedure = "/account.v1.AccountService/DeleteAccount"
	// AccountServiceAddFriendWithIdProcedure is the fully-qualified name of the AccountService's
	// AddFriendWithId RPC.
	AccountServiceAddFriendWithIdProcedure = "/account.v1.AccountService/AddFriendWithId"
	// AccountServiceBlockAccountWithIdProcedure is the fully-qualified name of the AccountService's
	// BlockAccountWithId RPC.
	AccountServiceBlockAccountWithIdProcedure = "/account.v1.AccountService/BlockAccountWithId"
	// AccountServiceSendMessageProcedure is the fully-qualified name of the AccountService's
	// SendMessage RPC.
	AccountServiceSendMessageProcedure = "/account.v1.AccountService/SendMessage"
)

// AccountServiceClient is a client for the account.v1.AccountService service.
type AccountServiceClient interface {
	GetAccount(context.Context, *connect.Request[v1.GetAccountRequest]) (*connect.Response[v1.GetAccountResponse], error)
	GetAccountWithId(context.Context, *connect.Request[v1.GetAccountWithIdRequest]) (*connect.Response[v1.GetAccountWithIdResponse], error)
	GenerateAccountLinkPath(context.Context, *connect.Request[v1.GenerateAccountLinkPathRequest]) (*connect.Response[v1.GenerateAccountLinkPathResponse], error)
	ResolveAccountLinkPath(context.Context, *connect.Request[v1.ResolveAccountLinkPathRequest]) (*connect.Response[v1.ResolveAccountLinkPathResponse], error)
	DeleteAccount(context.Context, *connect.Request[v1.DeleteAccountRequest]) (*connect.Response[v1.DeleteAccountResponse], error)
	AddFriendWithId(context.Context, *connect.Request[v1.AddFriendWithIdRequest]) (*connect.Response[v1.AddFriendWithIdResponse], error)
	BlockAccountWithId(context.Context, *connect.Request[v1.BlockAccountWithIdRequest]) (*connect.Response[v1.BlockAccountWithIdResponse], error)
	SendMessage(context.Context, *connect.Request[v1.SendMessageRequest]) (*connect.Response[v1.SendMessageResponse], error)
}

// NewAccountServiceClient constructs a client for the account.v1.AccountService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAccountServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AccountServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	accountServiceMethods := v1.File_account_v1_account_proto.Services().ByName("AccountService").Methods()
	return &accountServiceClient{
		getAccount: connect.NewClient[v1.GetAccountRequest, v1.GetAccountResponse](
			httpClient,
			baseURL+AccountServiceGetAccountProcedure,
			connect.WithSchema(accountServiceMethods.ByName("GetAccount")),
			connect.WithClientOptions(opts...),
		),
		getAccountWithId: connect.NewClient[v1.GetAccountWithIdRequest, v1.GetAccountWithIdResponse](
			httpClient,
			baseURL+AccountServiceGetAccountWithIdProcedure,
			connect.WithSchema(accountServiceMethods.ByName("GetAccountWithId")),
			connect.WithClientOptions(opts...),
		),
		generateAccountLinkPath: connect.NewClient[v1.GenerateAccountLinkPathRequest, v1.GenerateAccountLinkPathResponse](
			httpClient,
			baseURL+AccountServiceGenerateAccountLinkPathProcedure,
			connect.WithSchema(accountServiceMethods.ByName("GenerateAccountLinkPath")),
			connect.WithClientOptions(opts...),
		),
		resolveAccountLinkPath: connect.NewClient[v1.ResolveAccountLinkPathRequest, v1.ResolveAccountLinkPathResponse](
			httpClient,
			baseURL+AccountServiceResolveAccountLinkPathProcedure,
			connect.WithSchema(accountServiceMethods.ByName("ResolveAccountLinkPath")),
			connect.WithClientOptions(opts...),
		),
		deleteAccount: connect.NewClient[v1.DeleteAccountRequest, v1.DeleteAccountResponse](
			httpClient,
			baseURL+AccountServiceDeleteAccountProcedure,
			connect.WithSchema(accountServiceMethods.ByName("DeleteAccount")),
			connect.WithClientOptions(opts...),
		),
		addFriendWithId: connect.NewClient[v1.AddFriendWithIdRequest, v1.AddFriendWithIdResponse](
			httpClient,
			baseURL+AccountServiceAddFriendWithIdProcedure,
			connect.WithSchema(accountServiceMethods.ByName("AddFriendWithId")),
			connect.WithClientOptions(opts...),
		),
		blockAccountWithId: connect.NewClient[v1.BlockAccountWithIdRequest, v1.BlockAccountWithIdResponse](
			httpClient,
			baseURL+AccountServiceBlockAccountWithIdProcedure,
			connect.WithSchema(accountServiceMethods.ByName("BlockAccountWithId")),
			connect.WithClientOptions(opts...),
		),
		sendMessage: connect.NewClient[v1.SendMessageRequest, v1.SendMessageResponse](
			httpClient,
			baseURL+AccountServiceSendMessageProcedure,
			connect.WithSchema(accountServiceMethods.ByName("SendMessage")),
			connect.WithClientOptions(opts...),
		),
	}
}

// accountServiceClient implements AccountServiceClient.
type accountServiceClient struct {
	getAccount              *connect.Client[v1.GetAccountRequest, v1.GetAccountResponse]
	getAccountWithId        *connect.Client[v1.GetAccountWithIdRequest, v1.GetAccountWithIdResponse]
	generateAccountLinkPath *connect.Client[v1.GenerateAccountLinkPathRequest, v1.GenerateAccountLinkPathResponse]
	resolveAccountLinkPath  *connect.Client[v1.ResolveAccountLinkPathRequest, v1.ResolveAccountLinkPathResponse]
	deleteAccount           *connect.Client[v1.DeleteAccountRequest, v1.DeleteAccountResponse]
	addFriendWithId         *connect.Client[v1.AddFriendWithIdRequest, v1.AddFriendWithIdResponse]
	blockAccountWithId      *connect.Client[v1.BlockAccountWithIdRequest, v1.BlockAccountWithIdResponse]
	sendMessage             *connect.Client[v1.SendMessageRequest, v1.SendMessageResponse]
}

// GetAccount calls account.v1.AccountService.GetAccount.
func (c *accountServiceClient) GetAccount(ctx context.Context, req *connect.Request[v1.GetAccountRequest]) (*connect.Response[v1.GetAccountResponse], error) {
	return c.getAccount.CallUnary(ctx, req)
}

// GetAccountWithId calls account.v1.AccountService.GetAccountWithId.
func (c *accountServiceClient) GetAccountWithId(ctx context.Context, req *connect.Request[v1.GetAccountWithIdRequest]) (*connect.Response[v1.GetAccountWithIdResponse], error) {
	return c.getAccountWithId.CallUnary(ctx, req)
}

// GenerateAccountLinkPath calls account.v1.AccountService.GenerateAccountLinkPath.
func (c *accountServiceClient) GenerateAccountLinkPath(ctx context.Context, req *connect.Request[v1.GenerateAccountLinkPathRequest]) (*connect.Response[v1.GenerateAccountLinkPathResponse], error) {
	return c.generateAccountLinkPath.CallUnary(ctx, req)
}

// ResolveAccountLinkPath calls account.v1.AccountService.ResolveAccountLinkPath.
func (c *accountServiceClient) ResolveAccountLinkPath(ctx context.Context, req *connect.Request[v1.ResolveAccountLinkPathRequest]) (*connect.Response[v1.ResolveAccountLinkPathResponse], error) {
	return c.resolveAccountLinkPath.CallUnary(ctx, req)
}

// DeleteAccount calls account.v1.AccountService.DeleteAccount.
func (c *accountServiceClient) DeleteAccount(ctx context.Context, req *connect.Request[v1.DeleteAccountRequest]) (*connect.Response[v1.DeleteAccountResponse], error) {
	return c.deleteAccount.CallUnary(ctx, req)
}

// AddFriendWithId calls account.v1.AccountService.AddFriendWithId.
func (c *accountServiceClient) AddFriendWithId(ctx context.Context, req *connect.Request[v1.AddFriendWithIdRequest]) (*connect.Response[v1.AddFriendWithIdResponse], error) {
	return c.addFriendWithId.CallUnary(ctx, req)
}

// BlockAccountWithId calls account.v1.AccountService.BlockAccountWithId.
func (c *accountServiceClient) BlockAccountWithId(ctx context.Context, req *connect.Request[v1.BlockAccountWithIdRequest]) (*connect.Response[v1.BlockAccountWithIdResponse], error) {
	return c.blockAccountWithId.CallUnary(ctx, req)
}

// SendMessage calls account.v1.AccountService.SendMessage.
func (c *accountServiceClient) SendMessage(ctx context.Context, req *connect.Request[v1.SendMessageRequest]) (*connect.Response[v1.SendMessageResponse], error) {
	return c.sendMessage.CallUnary(ctx, req)
}

// AccountServiceHandler is an implementation of the account.v1.AccountService service.
type AccountServiceHandler interface {
	GetAccount(context.Context, *connect.Request[v1.GetAccountRequest]) (*connect.Response[v1.GetAccountResponse], error)
	GetAccountWithId(context.Context, *connect.Request[v1.GetAccountWithIdRequest]) (*connect.Response[v1.GetAccountWithIdResponse], error)
	GenerateAccountLinkPath(context.Context, *connect.Request[v1.GenerateAccountLinkPathRequest]) (*connect.Response[v1.GenerateAccountLinkPathResponse], error)
	ResolveAccountLinkPath(context.Context, *connect.Request[v1.ResolveAccountLinkPathRequest]) (*connect.Response[v1.ResolveAccountLinkPathResponse], error)
	DeleteAccount(context.Context, *connect.Request[v1.DeleteAccountRequest]) (*connect.Response[v1.DeleteAccountResponse], error)
	AddFriendWithId(context.Context, *connect.Request[v1.AddFriendWithIdRequest]) (*connect.Response[v1.AddFriendWithIdResponse], error)
	BlockAccountWithId(context.Context, *connect.Request[v1.BlockAccountWithIdRequest]) (*connect.Response[v1.BlockAccountWithIdResponse], error)
	SendMessage(context.Context, *connect.Request[v1.SendMessageRequest]) (*connect.Response[v1.SendMessageResponse], error)
}

// NewAccountServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAccountServiceHandler(svc AccountServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	accountServiceMethods := v1.File_account_v1_account_proto.Services().ByName("AccountService").Methods()
	accountServiceGetAccountHandler := connect.NewUnaryHandler(
		AccountServiceGetAccountProcedure,
		svc.GetAccount,
		connect.WithSchema(accountServiceMethods.ByName("GetAccount")),
		connect.WithHandlerOptions(opts...),
	)
	accountServiceGetAccountWithIdHandler := connect.NewUnaryHandler(
		AccountServiceGetAccountWithIdProcedure,
		svc.GetAccountWithId,
		connect.WithSchema(accountServiceMethods.ByName("GetAccountWithId")),
		connect.WithHandlerOptions(opts...),
	)
	accountServiceGenerateAccountLinkPathHandler := connect.NewUnaryHandler(
		AccountServiceGenerateAccountLinkPathProcedure,
		svc.GenerateAccountLinkPath,
		connect.WithSchema(accountServiceMethods.ByName("GenerateAccountLinkPath")),
		connect.WithHandlerOptions(opts...),
	)
	accountServiceResolveAccountLinkPathHandler := connect.NewUnaryHandler(
		AccountServiceResolveAccountLinkPathProcedure,
		svc.ResolveAccountLinkPath,
		connect.WithSchema(accountServiceMethods.ByName("ResolveAccountLinkPath")),
		connect.WithHandlerOptions(opts...),
	)
	accountServiceDeleteAccountHandler := connect.NewUnaryHandler(
		AccountServiceDeleteAccountProcedure,
		svc.DeleteAccount,
		connect.WithSchema(accountServiceMethods.ByName("DeleteAccount")),
		connect.WithHandlerOptions(opts...),
	)
	accountServiceAddFriendWithIdHandler := connect.NewUnaryHandler(
		AccountServiceAddFriendWithIdProcedure,
		svc.AddFriendWithId,
		connect.WithSchema(accountServiceMethods.ByName("AddFriendWithId")),
		connect.WithHandlerOptions(opts...),
	)
	accountServiceBlockAccountWithIdHandler := connect.NewUnaryHandler(
		AccountServiceBlockAccountWithIdProcedure,
		svc.BlockAccountWithId,
		connect.WithSchema(accountServiceMethods.ByName("BlockAccountWithId")),
		connect.WithHandlerOptions(opts...),
	)
	accountServiceSendMessageHandler := connect.NewUnaryHandler(
		AccountServiceSendMessageProcedure,
		svc.SendMessage,
		connect.WithSchema(accountServiceMethods.ByName("SendMessage")),
		connect.WithHandlerOptions(opts...),
	)
	return "/account.v1.AccountService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AccountServiceGetAccountProcedure:
			accountServiceGetAccountHandler.ServeHTTP(w, r)
		case AccountServiceGetAccountWithIdProcedure:
			accountServiceGetAccountWithIdHandler.ServeHTTP(w, r)
		case AccountServiceGenerateAccountLinkPathProcedure:
			accountServiceGenerateAccountLinkPathHandler.ServeHTTP(w, r)
		case AccountServiceResolveAccountLinkPathProcedure:
			accountServiceResolveAccountLinkPathHandler.ServeHTTP(w, r)
		case AccountServiceDeleteAccountProcedure:
			accountServiceDeleteAccountHandler.ServeHTTP(w, r)
		case AccountServiceAddFriendWithIdProcedure:
			accountServiceAddFriendWithIdHandler.ServeHTTP(w, r)
		case AccountServiceBlockAccountWithIdProcedure:
			accountServiceBlockAccountWithIdHandler.ServeHTTP(w, r)
		case AccountServiceSendMessageProcedure:
			accountServiceSendMessageHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAccountServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAccountServiceHandler struct{}

func (UnimplementedAccountServiceHandler) GetAccount(context.Context, *connect.Request[v1.GetAccountRequest]) (*connect.Response[v1.GetAccountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("account.v1.AccountService.GetAccount is not implemented"))
}

func (UnimplementedAccountServiceHandler) GetAccountWithId(context.Context, *connect.Request[v1.GetAccountWithIdRequest]) (*connect.Response[v1.GetAccountWithIdResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("account.v1.AccountService.GetAccountWithId is not implemented"))
}

func (UnimplementedAccountServiceHandler) GenerateAccountLinkPath(context.Context, *connect.Request[v1.GenerateAccountLinkPathRequest]) (*connect.Response[v1.GenerateAccountLinkPathResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("account.v1.AccountService.GenerateAccountLinkPath is not implemented"))
}

func (UnimplementedAccountServiceHandler) ResolveAccountLinkPath(context.Context, *connect.Request[v1.ResolveAccountLinkPathRequest]) (*connect.Response[v1.ResolveAccountLinkPathResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("account.v1.AccountService.ResolveAccountLinkPath is not implemented"))
}

func (UnimplementedAccountServiceHandler) DeleteAccount(context.Context, *connect.Request[v1.DeleteAccountRequest]) (*connect.Response[v1.DeleteAccountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("account.v1.AccountService.DeleteAccount is not implemented"))
}

func (UnimplementedAccountServiceHandler) AddFriendWithId(context.Context, *connect.Request[v1.AddFriendWithIdRequest]) (*connect.Response[v1.AddFriendWithIdResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("account.v1.AccountService.AddFriendWithId is not implemented"))
}

func (UnimplementedAccountServiceHandler) BlockAccountWithId(context.Context, *connect.Request[v1.BlockAccountWithIdRequest]) (*connect.Response[v1.BlockAccountWithIdResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("account.v1.AccountService.BlockAccountWithId is not implemented"))
}

func (UnimplementedAccountServiceHandler) SendMessage(context.Context, *connect.Request[v1.SendMessageRequest]) (*connect.Response[v1.SendMessageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("account.v1.AccountService.SendMessage is not implemented"))
}
